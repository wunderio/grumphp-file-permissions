#!/bin/bash

set -e
set -u
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

function tmpfile_cleanup_at_exit {
  trap "{ rm -f /tmp/pre-commit.*; }" EXIT
}

function tmpfile {
  mktemp /tmp/pre-commit.XXXXXX
}

function acquire_files {

  local files=$(tmpfile)

  # if we have 0 command line args
  # then check staged stuff in git
  # else use command line args as files to check
  if [ "$#" -eq 0 ]; then
    # TODO: give warning or error in presence of MM.
    # We cannot check MM,
    # because we would check updated version
    # not the staged version.
    # using bash for checking file types
    # because mac's find and xargs are castrated.
    git status -s --porcelain \
    | grep -E '^(M |A ) ' \
    | sed -e 's/^ *[^ ]* *//' \
    | grep -vE '/features/.*\.inc$' \
    | bash -c 'while read f; do test -f "$f" && echo "$f" ; done' \
    > "$files"
  else
    local file
    for file in "$@"
    do
      echo "$file" >> "$files"
    done
  fi

  echo -n "$files"
}

function acquire_files_mime {

  local files="$1"
  local mime="$2"
  local files_filtered=$(tmpfile)

  file --mime-type -f "$files" \
  | grep -E ':\s*'"$mime"'$' \
  | sed -e 's/:.*//' \
  > "$files_filtered"

  echo -n "$files_filtered"
}

function check_perms {
  local perms_expect="$1"
  local file="$2"

  case "$(uname -s)" in
    Darwin*) # mac
      stat_flags='-f %p'
      perms_expect="100$perms_expect"
      ;;
    Linux*|*) # linux or the rest
      stat_flags='-c %a'
      ;;
  esac

  perms_current="$(stat $stat_flags "$file")"
  if [ "$perms_current" != "$perms_expect" ]; then
    cat <<EOF
File: $file
Current permissions:  $perms_current
Expected permissions: $perms_expect
EOF
    exit 1
  fi
}

function check_sh_perms {
  local file="$@"
  check_perms 755 "$file"
}

check_sh_perms "$1"
